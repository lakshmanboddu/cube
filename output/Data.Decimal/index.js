// Generated by purs version 0.11.6
"use strict";
var $foreign = require("./foreign");
var Data_CommutativeRing = require("../Data.CommutativeRing");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var showDecimal = new Data_Show.Show(function (x) {
    return "(fromString \"" + ($foreign.toString(x) + "\")");
});
var semiringDecimal = new Data_Semiring.Semiring($foreign.dAdd, $foreign.dMul, $foreign.fromInt(1), $foreign.fromInt(0));
var ringDecimal = new Data_Ring.Ring(function () {
    return semiringDecimal;
}, $foreign.dSub);
var fromString = $foreign["fromString'"](Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var eqDecimal = new Data_Eq.Eq($foreign.dEquals);
var ordDecimal = new Data_Ord.Ord(function () {
    return eqDecimal;
}, function (x) {
    return function (y) {
        var v = $foreign.dCompare(x)(y);
        if (v === 1) {
            return Data_Ordering.GT.value;
        };
        if (v === 0) {
            return Data_Ordering.EQ.value;
        };
        return Data_Ordering.LT.value;
    };
});
var commutativeRingDecimal = new Data_CommutativeRing.CommutativeRing(function () {
    return ringDecimal;
});
var euclideanRingDecimal = new Data_EuclideanRing.EuclideanRing(function () {
    return commutativeRingDecimal;
}, function (v) {
    return 1;
}, $foreign.dDiv, function (v) {
    return function (v1) {
        return Data_Semiring.zero(semiringDecimal);
    };
});
module.exports = {
    fromString: fromString, 
    eqDecimal: eqDecimal, 
    ordDecimal: ordDecimal, 
    showDecimal: showDecimal, 
    semiringDecimal: semiringDecimal, 
    ringDecimal: ringDecimal, 
    commutativeRingDecimal: commutativeRingDecimal, 
    euclideanRingDecimal: euclideanRingDecimal, 
    abs: $foreign.abs, 
    acos: $foreign.acos, 
    acosh: $foreign.acosh, 
    asin: $foreign.asin, 
    asinh: $foreign.asinh, 
    atan: $foreign.atan, 
    atan2: $foreign.atan2, 
    atanh: $foreign.atanh, 
    ceil: $foreign.ceil, 
    cos: $foreign.cos, 
    cosh: $foreign.cosh, 
    e: $foreign.e, 
    exp: $foreign.exp, 
    floor: $foreign.floor, 
    fromInt: $foreign.fromInt, 
    fromNumber: $foreign.fromNumber, 
    "isFinite": $foreign["isFinite"], 
    isInteger: $foreign.isInteger, 
    ln: $foreign.ln, 
    log10: $foreign.log10, 
    max: $foreign.max, 
    min: $foreign.min, 
    pi: $foreign.pi, 
    pow: $foreign.pow, 
    round: $foreign.round, 
    sin: $foreign.sin, 
    sinh: $foreign.sinh, 
    sqrt: $foreign.sqrt, 
    tan: $foreign.tan, 
    tanh: $foreign.tanh, 
    toNumber: $foreign.toNumber, 
    toPrecision: $foreign.toPrecision, 
    toSignificantDigits: $foreign.toSignificantDigits, 
    toString: $foreign.toString
};
